@page "/locacao"

@inject LoginContainer login

@if (login.Logado == true && login.IsAdmin == false)
{
    @if (LocacoesLivros == null && MensagemErro == null)
    {
        <ExibirSpinner />
    }
    else if (MensagemErro != null)
    {
        <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
    }
    else
    {
        <h3 class="mb-5" style="text-align:center;">Locações realizadas</h3>
        @if (LocacoesLivros.Count() > 0)
        {

            <br>
            <table id="locacoes">
                <tr>
                    <th>Nome</th>
                    <th>Autor</th>
                    <th>Editora</th>
                    <th></th>
                </tr>
                @foreach (var item in LocacoesLivros)
                {
                    <tr>
                        <td>@item.LivroNome</td>
                        <td>@item.LivroAutor</td>
                        <td>@item.LivroEditora</td>
                        <button @onclick="(() => DeleteLocacaoLivro_Click(item.Id))" class="remove">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </tr>
                }
            </table>
        }
        else
        {
        <div>
            <h3><strong>Você ainda não realizou nenhuma locação</strong></h3>
        </div>
        }        
    }
}

@code {
    [Inject]
    public ILocacaoService? LocacaoService { get; set; }

    public List<LocacaoLivroDto>? LocacoesLivros { get; set; }

    public string? MensagemErro { get; set; }

    protected int QtdTotal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocacoesLivros = await LocacaoService.GetLivros(login.IdUser.ToString());
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task DeleteLocacaoLivro_Click(int id)
    {
        // excluirá o livro escolhido da cesta/ banco
        var locacaoLivroDto = await LocacaoService.DeletaLivro(id);

        // remove o livro da coleção de livros (LocacoesLivros) da memoria no cliente
        await RemoveLocacaoLivro(id);
    }


    // os seguintes métodos trabalham na memória, ao invés de uma nova interação com o BD, que teria um pior desempenho
    // após a remoção, a interface é atualizada

    private LocacaoLivroDto GetLocacaoLivro(int id)
    {
        return LocacoesLivros.FirstOrDefault(l => l.Id == id);
    }

    private async Task RemoveLocacaoLivro(int id)
    {
        var locacaoLivroDto = GetLocacaoLivro(id);  // obtém o livro
        LocacoesLivros.Remove(locacaoLivroDto);     // remove
    }
}
