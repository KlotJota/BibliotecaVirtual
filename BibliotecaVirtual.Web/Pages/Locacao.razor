@page "/locacao"

@if (LocacoesLivros == null && MensagemErro == null)
{
    <ExibirSpinner />
}
else if (MensagemErro != null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <h3 class="mb-5" style="text-align:center;">Cesta de livros</h3>
    @if (LocacoesLivros.Count() > 0)
    {
        
            
                @foreach (var item in LocacoesLivros)
                {
                    <section class="flex">
                        <div id="container">
                            <div class="product-details">

                                <h1>@item.LivroNome</h1>

                                <p class="information">@item.LivroDescricao</p>

                                <div class="control">
                                    <a href="/LivroDetalhes/@item.LivroId">
                                        <button class="btn">
                                            <span class="seta-direita"><i class="fa-solid fa-circle-arrow-right" aria-hidden="true"></i></span>
                                            <span class="ver">Ver mais</span>
                                        </button>
                                    </a>
                                </div>
                            </div>

                            <div class="product-image">
                                <img src="@item.ImagemUrl" alt="@item.ImagemUrl">

                                <div class="info">
                                    <h2> Descrição </h2>
                                    <ul>
                                        <li><strong>Autor(a): </strong> @item.LivroAutor </li>
                                        <li><strong>Quantidade de páginas: </strong>@item.LivroQtdPaginas</li>
                                        <li><strong>Editora: </strong>@item.LivroEditora</li>
                                    </ul>
                                </div>
                            </div>
                            <div>   
                                <button @onclick="(() => DeleteLocacaoLivro_Click(item.Id))" class="remove">
                                    X
                                </button>
                            </div>
                        </div>
                    </section>
                }
        /*<div>
            <h2>@QtdTotal livros em sua cesta</h2>
        </div>*/
    }
    else
    {
    <div>
        <h3><strong>Poxa, seu carrinho de livros está vazio :(</strong></h3>
    </div>
    }        
}

@code {
    [Inject]
    public ILocacaoService? LocacaoService { get; set; }

    public List<LocacaoLivroDto>? LocacoesLivros { get; set; }

    public string? MensagemErro { get; set; }

    protected int QtdTotal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocacoesLivros = await LocacaoService.GetLivros(AlunoLogado.AlunoId);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task DeleteLocacaoLivro_Click(int id)
    {
        // excluirá o livro escolhido da cesta/ banco
        var locacaoLivroDto = await LocacaoService.DeletaLivro(id);

        // remove o livro da coleção de livros (LocacoesLivros) da memoria no cliente
        await RemoveLocacaoLivro(id);
    }


    // os seguintes métodos trabalham na memória, ao invés de uma nova interação com o BD, que teria um pior desempenho
    // após a remoção, a interface é atualizada

    private LocacaoLivroDto GetLocacaoLivro(int id)
    {
        return LocacoesLivros.FirstOrDefault(l => l.Id == id);
    }

    private async Task RemoveLocacaoLivro(int id)
    {
        var locacaoLivroDto = GetLocacaoLivro(id);  // obtém o livro
        LocacoesLivros.Remove(locacaoLivroDto);     // remove
    }

    private void SetQtdTotal()
    {
        QtdTotal = LocacoesLivros.Sum(l => l.Quantidade);
    }

    private void CalculaQtdTotal()
    {
        SetQtdTotal();
    }
}
