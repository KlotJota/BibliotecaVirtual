// <auto-generated />
using System;
using BibliotecaVirtual.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotecaVirtual.Api.Migrations
{
    [DbContext(typeof(BDBiblioteca))]
    partial class BDBibliotecaModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Programação"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Administração"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Arquitetura"
                        });
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Ads",
                            Turno = "Tarde"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Informática para negócios",
                            Turno = "Noite"
                        });
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Favorito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlunoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Favoritos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlunoId = "1"
                        },
                        new
                        {
                            Id = 2,
                            AlunoId = "2"
                        });
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.FavoritoLivro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FavoritoId")
                        .HasColumnType("int");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FavoritoId");

                    b.HasIndex("LivroId");

                    b.ToTable("FavoritoLivros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Editora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeLivro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QtdPaginas")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Livros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Autor = "Steven Spielberg",
                            CategoriaId = 1,
                            Descricao = "O Codificador Limpo contém muitos conselhos pragmáticos que visam transformar o comportamento do profissional de software. O autor transmite valiosos ensinamentos sobre ética, respeito, responsabilidade, sinceridade e comprometimento, através de sua experiência como programador.",
                            Editora = "Nova",
                            ImagemUrl = "/Livros/livro1.png",
                            NomeLivro = "O Codificador Limpo",
                            QtdPaginas = 198,
                            Quantidade = 5
                        },
                        new
                        {
                            Id = 2,
                            Autor = "Joao",
                            CategoriaId = 1,
                            Descricao = "Curso Intensivo de Python é uma introdução completa e em ritmo acelerado à linguagem Python, que fará você escrever programas, resolver problemas e criar soluções que funcionarão em um piscar de olhos",
                            Editora = "Velha",
                            ImagemUrl = "/Livros/livro2.png",
                            NomeLivro = "Curso Intensivo de Pyhton",
                            QtdPaginas = 120,
                            Quantidade = 8
                        },
                        new
                        {
                            Id = 3,
                            Autor = "Alexandre",
                            CategoriaId = 1,
                            Descricao = "Os conteúdos abordados em Lógica de Programação e Algoritmos são fundamentais a todos aqueles que desejam ingressar no universo da Programação de Computadores. Esses conteúdos, no geral, impõem algumas dificuldades aos iniciantes.",
                            Editora = "Massa",
                            ImagemUrl = "/Livros/livro5.jpg",
                            NomeLivro = "Lógica de programação e algoritmos com JavaScript",
                            QtdPaginas = 180,
                            Quantidade = 4
                        },
                        new
                        {
                            Id = 4,
                            Autor = "Boisés Camilo",
                            CategoriaId = 2,
                            Descricao = "Com linguagem simples e didática – sem, no entanto, fugir da complexidade do assunto –, o livro procura tornar prática a lógica de programação, além de mostrar aos estudantes um caminho mais adequado na construção dos algoritmos. ",
                            Editora = "Boisés Inc.",
                            ImagemUrl = "/Livros/livro3.png",
                            NomeLivro = "Algoritmos e Lógica de Programação",
                            QtdPaginas = 100,
                            Quantidade = 2
                        },
                        new
                        {
                            Id = 5,
                            Autor = "Carlito Teves",
                            CategoriaId = 2,
                            Descricao = "Contempla métodos de operações matemáticas, manipulação de cadeias de caracteres e conversão de tipos de dados. Aborda o conceito de métodos e pacotes, e os tipos de arranjos (unidimensional, bidimensional, com argumentos e de classe).",
                            Editora = "Tadeu",
                            ImagemUrl = "/Livros/livro6.png",
                            NomeLivro = "JAVA 8 - Programação de computadores",
                            QtdPaginas = 110,
                            Quantidade = 5
                        },
                        new
                        {
                            Id = 6,
                            Autor = "Steven Spielberg",
                            CategoriaId = 3,
                            Descricao = "Pet Sematary é um romance de terror escrito por Stephen King. Foi lançado em 1983.",
                            Editora = "Massa",
                            ImagemUrl = "/Livros/livro4.png",
                            NomeLivro = "O Cemitério",
                            QtdPaginas = 160,
                            Quantidade = 3
                        },
                        new
                        {
                            Id = 7,
                            Autor = "Maria Almeida",
                            CategoriaId = 3,
                            Descricao = "Programação em C é um livro que ensina conceitos e ideias sobre a linguagem C",
                            Editora = "Abóbora",
                            ImagemUrl = "/Livros/livro7.jpg",
                            NomeLivro = "Programação em C",
                            QtdPaginas = 90,
                            Quantidade = 2
                        });
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Locacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlunoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locacoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlunoId = "1"
                        },
                        new
                        {
                            Id = 2,
                            AlunoId = "2"
                        });
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.LocacaoLivro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<int>("LocacaoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivroId");

                    b.HasIndex("LocacaoId");

                    b.ToTable("LocacoesLivros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavoritosId")
                        .HasColumnType("int");

                    b.Property<int?>("LocacoesId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FavoritosId");

                    b.HasIndex("LocacoesId");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Administrador", b =>
                {
                    b.HasBaseType("BibliotecaVirtual.Api.Entities.Usuario");

                    b.HasDiscriminator().HasValue("Administrador");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Cpf = "23232421",
                            Email = "henrique@gmail.com",
                            Nome = "Henrique",
                            Senha = "churrasco12",
                            Status = 1,
                            Telefone = "991726623"
                        });
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Aluno", b =>
                {
                    b.HasBaseType("BibliotecaVirtual.Api.Entities.Usuario");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Ra")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CursoId");

                    b.HasDiscriminator().HasValue("Aluno");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "33034799",
                            Email = "artur@gmail.com",
                            Nome = "Artur",
                            Senha = "paodeakho",
                            Status = 2,
                            Telefone = "991726623",
                            CursoId = 1,
                            Ra = "40028922"
                        },
                        new
                        {
                            Id = 2,
                            Cpf = "91289123",
                            Email = "zomboid@gmail.com",
                            Nome = "Zomboid",
                            Senha = "casseta15",
                            Status = 2,
                            Telefone = "991212662",
                            CursoId = 2,
                            Ra = "912903001"
                        });
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.FavoritoLivro", b =>
                {
                    b.HasOne("BibliotecaVirtual.Api.Entities.Favorito", "Favoritos")
                        .WithMany("FavoritoLivros")
                        .HasForeignKey("FavoritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaVirtual.Api.Entities.Livro", "Livros")
                        .WithMany("FavoritosLivros")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favoritos");

                    b.Navigation("Livros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Livro", b =>
                {
                    b.HasOne("BibliotecaVirtual.Api.Entities.Categoria", "Categorias")
                        .WithMany("Livros")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.LocacaoLivro", b =>
                {
                    b.HasOne("BibliotecaVirtual.Api.Entities.Livro", "Livros")
                        .WithMany("LocacoesLivros")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaVirtual.Api.Entities.Locacao", "Locacoes")
                        .WithMany("LocacaoLivros")
                        .HasForeignKey("LocacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livros");

                    b.Navigation("Locacoes");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Usuario", b =>
                {
                    b.HasOne("BibliotecaVirtual.Api.Entities.Favorito", "Favoritos")
                        .WithMany()
                        .HasForeignKey("FavoritosId");

                    b.HasOne("BibliotecaVirtual.Api.Entities.Locacao", "Locacoes")
                        .WithMany()
                        .HasForeignKey("LocacoesId");

                    b.Navigation("Favoritos");

                    b.Navigation("Locacoes");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Aluno", b =>
                {
                    b.HasOne("BibliotecaVirtual.Api.Entities.Curso", "Cursos")
                        .WithMany("Alunos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cursos");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Categoria", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Curso", b =>
                {
                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Favorito", b =>
                {
                    b.Navigation("FavoritoLivros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Livro", b =>
                {
                    b.Navigation("FavoritosLivros");

                    b.Navigation("LocacoesLivros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Api.Entities.Locacao", b =>
                {
                    b.Navigation("LocacaoLivros");
                });
#pragma warning restore 612, 618
        }
    }
}
